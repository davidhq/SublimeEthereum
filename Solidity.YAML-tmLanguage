# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Solidity
scopeName: source.solidity
fileTypes: [sol]
uuid: ad87d2cd-8575-4afe-984e-9421a3788933


patterns:

# ASSEMBLY

- name: scope
  begin: \b(assembly)(?:\s*\((\".*?\")\))?\s*\{ # for example: assembly ("memory-safe") {
  beginCaptures:
    '1': {name: keyword}
    '2': {name: string.quoted}
  end: \}
  patterns:
  #- include: $self
  - include: "#assembly"

# NOT ASSEMBLY

# we don't want this to have an effect in assembly blocks
- match: \b(?<!\.)(addmod|mulmod|keccak256|sha256|sha3|ripemd160|ecrecover)\s*\(
  captures:
    '1': {name: support.type}

#
- include: "#everything"

repository:
  everything:
    patterns:

    - include: "#comments"

    - match: \b(event|enum)\s+([A-Za-z_]\w*)\b
      name: keyword
      captures:
        '2': {name: entity.name.function}
      comment: Events

    # we need this because of multiline!
    - name: scope
      #contentName: string.other.ssraw
      begin: \b(contract|interface|library)\s+([A-Za-z_]\w*)(?:\s+(is)\s+)?
      beginCaptures:
        '1': {name: keyword}
        '2': {name: entity.name.function}
        '3': {name: keyword}
      end: \{
      patterns:
      #- include: $self
      - name: entity.name.function
        match: '[A-Za-z_]\w*'
      # contract Derived1 is Base(7) {
      - include: "#numbers"

    # - match: \b(contract|interface|library)\s+([A-Za-z_]\w*)(?:\s+(is)\s+((?:[A-Za-z_]\w*\,?\s*)*))?\b
    #   name: keyword
    #   captures:
    #     '1': {name: keyword}
    #     '2': {name: entity.name.function}
    #     '3': {name: keyword}
    #     '4': {name: entity.name.function}
    #   comment: Structures, function, event definitions
    - match: \b(constructor|error|using|struct|type|modifier|fallback)(\s+[A-Za-z_]\w*)?\b
      name: keyword
      captures:
        '2': {name: entity.name.function}
      comment: Structures, function, event definitions
    - match: \b(function)(\s+[A-Za-z_]\w*)?\b
      name: keyword
      captures:
        '2': {name: entity.name.function}
      comment: Structures, function, event definitions
    - match: \.(length|selector)\b
      captures:
        '1': {name: markup.italic}
      comment: Special treatment for length and .selector
    - match: \bthis\b
      name: markup.italic
      comment: this
    - match: \bsuper\b
      name: markup.italic
      comment: Special treatment for "super"
    - match: \b(msg|block|tx|bytes|string)\.([A-Za-z_]\w*)\b
      captures:
        '1': {name: support.type}
        '2': {name: support.type}
      comment: msg and block special usage
    - match: \b(?:(indexed|memory|storage|calldata|payable|immutable)\s*(\b[A-Za-z_]\w*)?\s*)(?=[,\)\n])
      captures:
        '1': {name: keyword}
        '2': {name: variable.parameter} # variable.parameter
      comment: Other types function arguments, like structs... but can only detect them if they have a modifier, example -- function witness(instance memory w, instance memory a, instance memory a1, instance memory a1_odd, uint k)
    - match: \b(true|false)\b
      name: constant.language
      comment: True and false keywords
    - match: \b(payable)\s*\(
      captures:
        '1': {name: constant.language}
      comment: Type conversion payable(...)
    - match: \b(from)\s*(?=[\'\"])
      captures:
        '1': {name: keyword}
      comment: import ... from
    - match: \b(?:[A-Za-z_]\w*)\s+(as)\s+(?:[A-Za-z_]\w*)
      captures:
        '1': {name: keyword}
      comment: import {Unauthorized, add as func, Point} from "./Foo.sol";
    - match: \b(global); # using {plusOne, minusOne} for RestrictedNumber global;
      captures:
        '1': {name: keyword}
      comment: import ... from
    - match: \b(var|import|solidity|constant|pragma\s*(?:experimental|abicoder)?|mapping|payable|storage|memory|calldata|if|else|for|while|do|break|continue|returns?|try|catch|private|public|pure|view|internal|immutable|external|virtual|override|abstract|suicide|emit|is|throw|revert|assert|require|receive|delete)\b
      name: keyword
      comment: Langauge keywords
    - include: "#numbers"
    - match: \b(0[xX][a-fA-F0-9]+)\b
      name: constant.numeric
      comment: Hexadecimal
    - match: (=|:=|!|>|<|\||&|\?|\^|~|\*|\+|\-|\/|\%)
      name: keyword.operator
      comment: Operators
    - match: (\bhex\b|\bunicode\b)
      name: markup.italic
      comment: Operators
    - match: \s\:\s
      name: keyword.operator
      comment: Ternary colon
    - match: \bnow\b
      name: support.type
      comment: Now - it was removed in solidity 0.4 but we still include it because some old contracts use it
    - match: \b_;
      name: keyword
      comment: modifier placeholder statement
      #One novel construct found in Solidity is the placeholder statement _;. It may
      #appear only in function modifiers, where it denotes the point of entry into the
      #next modifier or the function body.
    - match: \b(abi)\.([A-Za-z_]\w*)\b
      name: support.type
      comment: abi functions
    # non-assembly special functions

    - match: \b(blockhash|gasleft)\s*\(
      captures:
        '1': {name: support.type}
      comment: Function call - some special built-in functions
    - match: \.(call|delegatecall|staticcall)\s*[\(\{]
      captures:
        '1': {name: support.type}
      comment: Function call - smart contract calls, also special params call{...}()
    - match: (?:\.|(new\s+))([A-Za-z_]\w*)\{
      captures:
        '1': {name: keyword}
        '2': {name: entity.name.function}
      comment: Special parameters IWETH(wavaxTokenAddress).deposit{ ... }(); ... new UniswapV3Pool{...}() https://docs.soliditylang.org/en/v0.8.11/control-structures.html#external-function-calls , https://docs.soliditylang.org/en/v0.8.11/control-structures.html#creating-contracts-via-new

    # FUNCTION PARAMETERS, STRUCT, ENUM fields ...
    # ⚠️ IERC777 etc is not a built-in type but we still give it special treatment!

    #⚠️ it's quite interesting that this doesn't interfere with anything since it's very general
    # if we had this line somewhere:

    # let something

    # it would cause problems because this regex would cover it
    # thatnkfully we don't have anything like this it seems
    # this line is possible in assembly but there detecting 'let' keyword first prevents this to have any effect
    - match: \b(?:(address(?:\s+payable)?|I?ERC[\dA-Za-z_]\w*|string|bytes?\d*|int\d*|uint\d*|bool|u?fixed\d+x\d+)|([A-Za-z_]\w*))\s*(?:\[(\d*)\])?\s*(?:\[(\d*)\])?\s*(?:(indexed|memory|storage|calldata|payable|immutable)?\s*(\b[A-Za-z_]\w*)?\s*)?(?=[,\)\n])
      captures:
        '1': {name: constant.language}
        '2': {name: scope}
        '3': {name: constant.numeric}
        '4': {name: constant.numeric}
        '5': {name: keyword}
        '6': {name: variable.parameter} # variable.parameter
      comment: Built-in types function arguments + non-built in arguments as well, also returns(...) arguments

    - match: \b(address(?:\s*payable)?|I?ERC[\dA-Za-z_]\w*|string|bytes?\d*|int\d*|uint\d*|bool|u?fixed\d+x\d+)\b(?:(?:\s*\[(\d*)\])?(?:\s*\[(\d*)\])?(?:\s*\[(\d*)\])?\s*((?:private\s|public\s|internal\s|external\s|constant\s|immutable\s|memory\s|storage\s)*)\s*(?:[A-Za-z_]\w*)\s*(\=))?
      captures:
        '1': {name: constant.language}
        '2': {name: constant.numeric}
        '3': {name: constant.numeric}
        '4': {name: constant.numeric}
        '5': {name: keyword}
        '6': {name: keyword}
      comment: Variable definitions - bytes data; | uint x = uint(y); BUT also just appearances of basic types anywhere... good example -- "using SafeMath for uint256;"

    - match: \b([A-Za-z_]\w*)(?:\s*\[(\d*)\]\s*)?(?:\s*\[(\d*)\]\s*)?\(
      captures:
        '1': {name: entity.name.function}
        '2': {name: constant.numeric}
        '3': {name: constant.numeric}
      comment: Function call, also for example - info.factories = new Factory[](factoryAddresses.length);


    - match: \b(wei|gwei|ether|seconds|minutes|hours|days|weeks)\b
      captures:
        '1': {name: support.type}
      comment: Ether and time units
    - match: \bnew\b
      name: keyword
      comment: New
    - match: \banonymous\b
      name: keyword
      comment: Event
    - match: \bunchecked\b
      name: keyword
      comment: Unchecked

    - name: string.quoted
      # match quotes without leading escape characters
      begin: (?<!\\)[\"]
      end: (?<!\\)[\"]
      patterns:
      - include: "#string"

    - name: string.quoted
      # match quotes without leading escape characters
      begin: (?<!\\)[\']
      end: (?<!\\)[\']
      patterns:
      - include: "#string"

    # old code - does not work correctly with escaped quotes inside strings
    # for example: "lala\"la"
    # - match: ([\"].*?[\"])
    #   name: string.quoted
    #   comment: Strings
    # - match: ([\'].*?[\'])
    #   name: string.quoted
    #   comment: Strings

  string:
    patterns:
    - match: \\"
      name: constant.character.escape
      comment: Strings
    - match: \\'
      name: constant.character.escape
      comment: Strings
    - match: .
      name: string.quoted
      comment: Strings

  assembly:
    patterns:
    # exclude normal function calls (eg. "add" as in _holderTokens[to].add(tokenId); )
    # by disallowing dot in front of opcode (negative lookbehind)
    # in case such function calls would appear inside assembly blocks
    - match: \b(?<!\.)(stop|add|sub|mul|div|sdiv|mod|smod|exp|not|lt|gt|slt|sgt|eq|iszero|and|or|xor|byte|shl|shr|sar|addmod|mulmod|signextend|keccak256|pc|pop|mload|mstore|mstore8|sload|sstore|msize|gas|address|balance|selfbalance|caller|callvalue|calldataload|calldatasize|calldatacopy|codesize|codecopy|extcodesize|extcodecopy|returndatasize|returndatacopy|extcodehash|create|create2|call|callcode|delegatecall|staticcall|return|revert|selfdestruct|invalid|log0|log1|log2|log3|log4|chainid|basefee|origin|gasprice|blockhash|coinbase|timestamp|number|difficulty|gaslimit)\s*\(
      captures:
        '1': {name: entity.name.function}
    - match: \b(let|switch|case|default)\b
      name: keyword
      comment: Assembly-specific keywords

    # if we don't do that then first nested block \{..\} will exit our assembly context when it reaches its closing brace
    - name: scope
      begin: \{
      end: \}
      patterns:
      - include: "#assembly"

    - include: "#everything"


  comments:
    patterns:
    - match: \/\/.*
      name: comment
      comment: Comments
    - begin: (\/\*)
      end: (\*\/)
      name: comment
      comment: Multiline comments

  numbers:
    patterns:
    - match: \b(?:[+-]?\.?\d[\d_eE]*)(?:\.\d+[\deE]*)?\b
      name: constant.numeric
      comment: Numbers, possibly with scientific notation
