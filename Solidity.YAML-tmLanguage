# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Solidity
scopeName: source.solidity
fileTypes: [sol]
uuid: ad87d2cd-8575-4afe-984e-9421a3788933

patterns:
- match: \/\/.*
  name: comment
  comment: Comments
- begin: (\/\*)
  end: (\*\/)
  name: comment
  comment: Multiline comments
- match: \b(event|enum)\s+([A-Za-z_]\w*)\b
  name: keyword
  captures:
    '2': {name: entity.name.function}
  comment: Events
- match: \b(contract|interface|library)\s+([A-Za-z_]\w*)(?:\s+(is)\s+((?:[A-Za-z_]\w*\,?\s*)*))?\b
  name: keyword
  captures:
    '1': {name: keyword}
    '2': {name: entity.name.function}
    '3': {name: keyword}
    '4': {name: entity.name.function}
  comment: Structures, function, event definitions
- match: \b(constructor|error|using|struct|type|modifier|fallback)(\s+[A-Za-z_]\w*)?\b
  name: keyword
  captures:
    '2': {name: entity.name.function}
  comment: Structures, function, event definitions
- match: \b(function)(\s+[A-Za-z_]\w*)?\b
  name: keyword
  captures:
    '2': {name: entity.name.function}
  comment: Structures, function, event definitions
- match: \.(length|selector)\b
  captures:
    '1': {name: support.type}
  comment: Special treatment for length and .selector
- match: \b(super)\b
  captures:
    '1': {name: support.type}
  comment: Special treatment for "super"
- match: \b(address\s*payable|address|string|bytes?\d*|int\d*|uint\d*|bool|u?fixed\d+x\d+)\s*(?:\[(\d*)\])?\s*(?:\[(\d*)\])?\s*(?:(indexed|memory|storage|calldata|payable|immutable)?\s*(\b[A-Za-z_]\w*)?\s*)?(?=[,\)\n])
  captures:
    '1': {name: constant.language}
    '2': {name: constant.numeric}
    '3': {name: constant.numeric}
    '4': {name: keyword}
    '5': {name: variable.parameter}
  comment: Built-in types function arguments
- match: \b(?:(indexed|memory|storage|calldata|payable|immutable)\s*(\b[A-Za-z_]\w*)?\s*)(?=[,\)\n])
  captures:
    '1': {name: keyword}
    '2': {name: variable.parameter}
  comment: Other types function arguments, like structs... but can only detect them if they have a modifier, example -- function witness(instance memory w, instance memory a, instance memory a1, instance memory a1_odd, uint k)
- match: \b(true|false)\b
  name: constant.language
  comment: True and false keywords
- match: \b(address\s*payable|address|string|bytes?\d*|int\d*|uint\d*|bool|u?fixed\d+x\d+)\b(?:(?:\s*\[(\d*)\])?(?:\s*\[(\d*)\])?(?:\s*\[(\d*)\])?\s*((?:private\s|public\s|internal\s|external\s|constant\s|immutable\s|memory\s|storage\s)*)\s*(?:[A-Za-z_]\w*)\s*(\=))?
  captures:
    '1': {name: constant.language}
    '2': {name: constant.numeric}
    '3': {name: constant.numeric}
    '4': {name: constant.numeric}
    '5': {name: keyword}
    '6': {name: keyword}
  comment: Variable definitions - bytes data; | uint x = uint(y); BUT also just appearances of basic types anywhere... good example -- "using SafeMath for uint256;"
- match: \b(var|solidity|import|constant|pragma|mapping|payable|storage|memory|calldata|if|else|for|while|do|break|continue|returns?|try|catch|private|public|pure|view|internal|immutable|external|virtual|override|abstract|this|suicide|selfdestruct|delegatecall|emit|new|is|throw|revert|assert|require|receive|delete)\b
  name: keyword
  comment: Langauge keywords
- match: (=|!|>|<|\||&|\?|:|\^|~|\*|\+|\-|\/|\%|\bhex\b|\bunicode\b)
  name: keyword
  comment: Operators
- match: \bnow\b
  name: support.type
  comment: Now - it was removed in solidity 0.4 but we still include it
- match: \b(msg|block|tx)\.([A-Za-z_]\w*)\b
  captures:
    '1': {name: markup.heading}
    '2': {name: markup.heading}
  comment: msg and block special usage
- match: \b(abi)\.([A-Za-z_]\w*)\b
  name: entity.name.function
  comment: abi functions
- match: \b(blockhash|gasleft|addmod|mulmod|keccak256|sha256|sha3|ripemd160|ecrecover)\s*\(
  captures:
    '1': {name: entity.name.function}
  comment: Function call - built-in functions
- match: \b([A-Za-z_]\w*)(?:\[(\d*)\])?(?:\[(\d*)\])?\(
  captures:
    '1': {name: entity.name.function}
    '2': {name: constant.numeric}
    '3': {name: constant.numeric}
  comment: Function call, also for example - uint[] memory a = new uint[332](7); or uint[2][] memory arrayOfPairs = new uint[2][](size);
- match: \b(wei|gwei|ether|seconds|minutes|hours|days|weeks)\b
  captures:
    '1': {name: markup.italic}
  comment: Ether and time units
- match: \banonymous\b
  name: keyword
  comment: Event
- match: \bunchecked\b
  name: keyword
  comment: Unchecked
- match: \b(assembly|switch|let|case|default)\b
  name: keyword
  comment: Assembly stuff
- match: ([\"].*?[\"])
  name: string.quoted
  comment: Strings
- match: ([\'].*?[\'])
  name: string.quoted
  comment: Strings
- match: \b(?:[+-]?\.?[\d_]+[eE]?)(?:\.\d+[eE]?\d*)?\b
  name: constant.numeric
  comment: Numbers, possibly with scientific notation
- match: \b(0[xX][a-fA-F0-9]+)\b
  name: constant.numeric
  comment: Hexadecimal
