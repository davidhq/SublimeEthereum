<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>sol</string>
	</array>
	<key>name</key>
	<string>Solidity</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>comment</key>
			<string>Comments</string>
			<key>match</key>
			<string>\/\/.*</string>
			<key>name</key>
			<string>comment</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\/\*)</string>
			<key>comment</key>
			<string>Multiline comments</string>
			<key>end</key>
			<string>(\*\/)</string>
			<key>name</key>
			<string>comment</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Events</string>
			<key>match</key>
			<string>\b(event|enum)\s+([A-Za-z_]\w*)\b</string>
			<key>name</key>
			<string>keyword</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.function</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Structures, function, event definitions</string>
			<key>match</key>
			<string>\b(contract|interface|library)\s+([A-Za-z_]\w*)(?:\s+(is)\s+((?:[A-Za-z_]\w*\,?\s*)*))?\b</string>
			<key>name</key>
			<string>keyword</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Structures, function, event definitions</string>
			<key>match</key>
			<string>\b(constructor|error|using|struct|type|modifier|fallback)(\s+[A-Za-z_]\w*)?\b</string>
			<key>name</key>
			<string>keyword</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Structures, function, event definitions</string>
			<key>match</key>
			<string>\b(function)(\s+[A-Za-z_]\w*)?\b</string>
			<key>name</key>
			<string>keyword</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.type</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Special treatment for length and .selector</string>
			<key>match</key>
			<string>\.(length|selector)\b</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>this</string>
			<key>match</key>
			<string>\bthis\b</string>
			<key>name</key>
			<string>markup.italic</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Special treatment for "super"</string>
			<key>match</key>
			<string>\bsuper\b</string>
			<key>name</key>
			<string>markup.italic</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.language</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.numeric</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>variable.parameter</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Built-in types function arguments</string>
			<key>match</key>
			<string>\b(address(?:\s+payable)?|string|bytes?\d*|int\d*|uint\d*|bool|u?fixed\d+x\d+)\s*(?:\[(\d*)\])?\s*(?:\[(\d*)\])?\s*(?:(indexed|memory|storage|calldata|payable|immutable)?\s*(\b[A-Za-z_]\w*)?\s*)?(?=[,\)\n])</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.parameter</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Other types function arguments, like structs... but can only detect them if they have a modifier, example -- function witness(instance memory w, instance memory a, instance memory a1, instance memory a1_odd, uint k)</string>
			<key>match</key>
			<string>\b(?:(indexed|memory|storage|calldata|payable|immutable)\s*(\b[A-Za-z_]\w*)?\s*)(?=[,\)\n])</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>True and false keywords</string>
			<key>match</key>
			<string>\b(true|false)\b</string>
			<key>name</key>
			<string>constant.language</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.language</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.numeric</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>constant.numeric</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>keyword</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>keyword</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Variable definitions - bytes data; | uint x = uint(y); BUT also just appearances of basic types anywhere... good example -- "using SafeMath for uint256;"</string>
			<key>match</key>
			<string>\b(address|payable|string|bytes?\d*|int\d*|uint\d*|bool|u?fixed\d+x\d+)\b(?:(?:\s*\[(\d*)\])?(?:\s*\[(\d*)\])?(?:\s*\[(\d*)\])?\s*((?:private\s|public\s|internal\s|external\s|constant\s|immutable\s|memory\s|storage\s)*)\s*(?:[A-Za-z_]\w*)\s*(\=))?</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>import ... from</string>
			<key>match</key>
			<string>\b(import).*?(from)\b</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>import</string>
			<key>match</key>
			<string>\b(import)\b</string>
			<key>name</key>
			<string>keyword</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Langauge keywords</string>
			<key>match</key>
			<string>\b(var|solidity|constant|pragma experimental|pragma|mapping|payable|storage|memory|calldata|if|else|for|while|do|break|continue|returns?|try|catch|private|public|pure|view|internal|immutable|external|virtual|override|abstract|suicide|emit|new|is|throw|revert|assert|require|receive|delete)\b</string>
			<key>name</key>
			<string>keyword</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Operators</string>
			<key>match</key>
			<string>(=|:=|!|&gt;|&lt;|\||&amp;|\?|\^|~|\*|\+|\-|\/|\%|\bhex\b|\bunicode\b)</string>
			<key>name</key>
			<string>keyword.operator</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Now - it was removed in solidity 0.4 but we still include it because some old contracts use it</string>
			<key>match</key>
			<string>\bnow\b</string>
			<key>name</key>
			<string>support.type</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>modifier placeholder statement</string>
			<key>match</key>
			<string>\b_;</string>
			<key>name</key>
			<string>keyword</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.type</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.type</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>msg and block special usage</string>
			<key>match</key>
			<string>\b(msg|block|tx)\.([A-Za-z_]\w*)\b</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>abi functions</string>
			<key>match</key>
			<string>\b(abi)\.([A-Za-z_]\w*)\b</string>
			<key>name</key>
			<string>markup.italic</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>markup.italic</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Function call - built-in functions</string>
			<key>match</key>
			<string>\b(blockhash|gasleft|addmod|mulmod|keccak256|sha256|sha3|ripemd160|ecrecover)\s*\(</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>markup.italic</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Function call - smart contract calls</string>
			<key>match</key>
			<string>\b(call|delegatecall|staticcall|selfdestruct)\s*\(</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.numeric</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Function call, also for example - uint[] memory a = new uint[332](7); or uint[2][] memory arrayOfPairs = new uint[2][](size);</string>
			<key>match</key>
			<string>\b([A-Za-z_]\w*)(?:\[(\d*)\])?(?:\[(\d*)\])?\(</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.type</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Ether and time units</string>
			<key>match</key>
			<string>\b(wei|gwei|ether|seconds|minutes|hours|days|weeks)\b</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Event</string>
			<key>match</key>
			<string>\banonymous\b</string>
			<key>name</key>
			<string>keyword</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Unchecked</string>
			<key>match</key>
			<string>\bunchecked\b</string>
			<key>name</key>
			<string>keyword</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Assembly stuff</string>
			<key>match</key>
			<string>\b(assembly|switch|let|case|default)\b</string>
			<key>name</key>
			<string>keyword</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Strings</string>
			<key>match</key>
			<string>([\"].*?[\"])</string>
			<key>name</key>
			<string>string.quoted</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Strings</string>
			<key>match</key>
			<string>([\'].*?[\'])</string>
			<key>name</key>
			<string>string.quoted</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Numbers, possibly with scientific notation</string>
			<key>match</key>
			<string>\b(?:[+-]?\.?\d[\d_eE]*)(?:\.\d+[\deE]*)?\b</string>
			<key>name</key>
			<string>constant.numeric</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Hexadecimal</string>
			<key>match</key>
			<string>\b(0[xX][a-fA-F0-9]+)\b</string>
			<key>name</key>
			<string>constant.numeric</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.solidity</string>
	<key>uuid</key>
	<string>ad87d2cd-8575-4afe-984e-9421a3788933</string>
</dict>
</plist>
